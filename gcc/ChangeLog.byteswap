2013-01-21  Andrew Pinski  <apinski@cavium.com>

	* fold-const.c (fold_binary_loc <case EQ_EXPR, case NE_EXPR>):
	Simplify byteswap(a) ==/!= byteswap(b) to a ==/!= b.
	* testsuite/gcc.dg/tree-ssa/bswap-3.c: New testcase.

2013-01-21  Andrew Pinski  <apinski@cavium.com>

	* simplify-rtx.c (simplify_binary_operation_1):
	<case IOR, case AND, case XOR>):  Simplify
	(BITOP (BYTESWAP A) (BYTESWAP B)) into (BYTESWAP (BITOP A B)).
	* testsuite/gcc.target/i386/builtin-bswap-5.c: New testcase.

2013-01-15  Andrew Pinski  <apinski@cavium.com>

	* testsuite/gcc.dg/tree-ssa/bswap-1.c: New testcase.
	* testsuite/gcc.dg/tree-ssa/bswap-3.c: New testcase.
	* testsuite/gcc.dg/tree-ssa/bswap-4.c: New testcase.

2013-01-15  Andrew Pinski  <apinski@cavium.com>

	* builtins.c (fold_builtin_bswap): Remove constant folding.
	Also add a NOP_EXPR after the BYTESWAP_EXPR just in case.
	* fold-const.c (fold_unary_loc): Optimize two BYTESWAP_EXPR into
	none. Constant folding of BYTESWAP_EXPR.
	* tree-ssa-forwprop.c (ssa_forward_propagate_and_combine): Treat
	BYTESWAP_EXPR like BIT_NOT_EXPR.

2013-01-14  Andrew Pinski  <apinski@cavium.com>

	* builtins.c (fold_builtin_bswap): Add loc argument.
	Build BYTESWAP_EXPR tree for the folding of the builtin.
	(fold_builtin_1): Pass loc to fold_builtin_bswap.
	* epxr.c (expand_expr_real_2): Add BYTESWAP_EXPR handling.
	* optabs.c (optab_for_tree_code): Likewise.
	(expand_unop): Add fixme for byteswap with float types.
	* tree-cfg.c (verify_gimple_assign_unary): Add BYTESWAP_EXPR handling.
	* tree-inline.c (estimate_operator_cost): Likewise.

2013-01-10  Andrew Pinski  <apinski@cavium.com>

	* tree.def (BYTESWAP_EXPR): New tree code.

