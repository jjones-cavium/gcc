2014-12-11  Andrew Pinski  <apinski@cavium.com>

	* config/aarch64/aarch64.c (aarch64_array_mode_supported_p):
	Return false always for ThunderX.

2014-12-11  Andrew Pinski  <apinski@cavium.com>

	Bug #13500
	* config/aarch64/aarch64.md (*add_<optab>si_ashift_uxtw):
	Fix resulting assembly.

2014-12-11  Andrew Pinski  <apinski@cavium.com>

	Bug #13491
	* config/aarch64/aarch64.c (*aarch64_load_symref_appropriately):
	Check whether the destination of SYMBOL_SMALL_TPREL is Pmode.

2014-12-06  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>

	Bug #12471
	* config/aarch64/aarch64.md (*sibcall_value_insn): Support
	1st operand for ILP32 by making it Pmode.

2014-11-25  Andrew Pinski  <apinski@cavium.com>

	Bug #13262
	* config/aarch64/aarch64.md (*and<mode>3_ze_nr_compare0):
	Use HOST_WIDE_INT_1U instead of 1 as the constant.
	* testsuite/gcc.c-torture/execute/20141125-1.c: New testcase.

2014-11-23  Andrew Pinski  <apinski@cavium.com>

	* config/aarch64/aarch64.c (AARCH64_FUSE_CMP_BRANCH): New define.
	(thunderx_tunings): Add AARCH64_FUSE_CMP_BRANCH to fuseable_ops.
	(aarch_macro_fusion_pair_p): Handle AARCH64_FUSE_CMP_BRANCH.

2014-11-22  Andrew Pinski  <apinski@cavium.com>

	* config/aarch64/aarch64.md (CRC): Add mode attribute.
	* config/aarch64/thunderx.md (thunderx_mul): Remove
	check for mode. It was not correct.
	(thunderx_mul_high): Delete.
	(thunderx_crc32): New reservation.
	(thunderx_crc64): Likewise.

2014-11-21  Andrew Pinski  <apinski@cavium.com>

	Bug #13243
	* config/aarch64/aarch64-option-extensions.def: s/atomic/lse/. s/ATOMIC/LSE/.
	* config/aarch64/aarch64.c (aarch64_expand_compare_and_swap):
	s/TARGET_ATOMIC/TARGET_LSE/.
	* config/aarch64/aarch64.h: s/TARGET_ATOMIC/TARGET_LSE/. s/AARCH64_FL_ATOMIC/AARCH64_FL_LSE/.
	s/AARCH64_ISA_ATOMIC/AARCH64_ISA_LSE.
	* config/aarch64/atomics.md: s/TARGET_ATOMIC/TARGET_LSE/.
	* testsuite/gcc.target/aarch64/*.c: s/noatomic/nolse.
	Also fix up all atomic testcase so they are tested
	even when the target at hand does not turn on LSE.

2014-11-20  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>

	* config/aarch64/aarch64.c (aarch64_registers_ok_for_load_pair_peep):
	Allow const_zero as source in stp instruction to support wzr/xzr.
	* config/aarch64/aarch64.md (store_pair<mode>): Allow const_zero as
	source operand for stp instruction.
	(peephole2s to generate stp): Likewise.

2014-10-31  Andrew Pinski  <apinski@cavium.com>

	* config/aarch64/thunderx.md (thunderx_mul): Add
	smlal and umlal.
	(thunderx_mul_high): Just use smull or umull.

2014-10-13  Andrew Pinski  <apinski@cavium.com>

	* config/aarch64/aarch64.c (aarch64_classify_symbol):
	Add extra comments on what is going on with the coding models.
	Tighten the check for weak symbols not to include ones
	which are in a comdat group.

2014-10-12  Andrew Pinski  <apinski@cavium.com>

	Bug #12577
	* config/aarch64/aarch64.c (thunderx_regmove_cost):
	Multiply all reg cost by 2 as 2 is a special number for reload.
	(thunderx_tunings): Change memmov_cost to 6.
	

2014-10-12  Andrew Pinski  <apinski@cavium.com>

	* config/aarch64/aarch64.c (aarch64_macro_fusion_pair):
	Fix return.

2014-10-12  Andrew Pinski  <apinski@cavium.com>

	Bug #12577
	* config/aarch64/aarch64.c (thunderx_regmove_cost):
	Fix up GP2FP and FP2GP cost to the correct value.

2014-10-09  Andrew Pinski  <apinski@cavium.com>

	* config/aarch64/aarch64-protos.h (tune_params): Add
	macro_fusion_pair field.
	* config/aarch64/aarch64.c (aarch64_thunderx_macro_fusion_pair):
	Add new prototype.
	(generic_tunings): Update for the new field.
	(cortexa53_tunings): Likewise.
	(thunderx_tunings): Likewise.
	(cortexa57_tunings): Likewise.
	(aarch64_macro_fusion_p): Check
	aarch64_tune_params->macro_fusion_pair.
	(aarch64_macro_fusion_pair): Rename to ...
	(aarch64_thunderx_macro_fusion_pair): This.
	(aarch64_macro_fusion_pair): New function
	which checks aarch64_tune_params->macro_fusion_pair.

2014-08-17  Andrew Pinski  <apinski@cavium.com>

	* testsuite/gcc.target/aarch64/ccmp-1.c: Rename to ..
	* testsuite/gcc.target/aarch64/conditional-compare-1.c: This.

2014-08-16  Andrew Pinski  <apinski@cavium.com>

	Bug #11833
	* config/aarch64/aarch64.c (aarch64_gen_ccmp_first):
	Don't reject OP1 being aarch64_ccmp_operand instead
	force into register if aarch64_ccmp_operand is false.
	(aarch64_gen_ccmp_next): Likewise.
	* testsuite/gcc.target/aarch64/ccmp-1.c: New testcase.

2014-08-07  Andrew Pinski  <apinski@cavium.com>

	* config/aarch64/thunder.md: rename to ...
	* config/aarch64/thunderx.md: This.  Also
	replace all thunder with thunderx.
	* config/aarch64/aarch64-cores.def: Rename thunder
	to thunderx.
	* config/aarch64/aarch64-tune.md: Likewise.
	* config/aarch64/aarch64.c: Likewise.
	* config/aarch64/aarch64.md: Likewise.

2014-08-05  Andrew Pinski  <apinski@cavium.com>

	* config/aarch64/aarch64-protos.h (aarch64_slow_unaligned_access): New declaration.
	(aarch64_move_by_pieces_p): Likewise.
	* config/aarch64/aarch64.c (aarch64_slow_unaligned_access): New function.
	(aarch64_move_by_pieces_p): Likewise.
	* config/aarch64/aarch64.h (MOVE_RATIO): Remove old comment.
	Also don't divide by 2.
	(MOVE_BY_PIECES_P): New define.
	(SLOW_UNALIGNED_ACCESS): New define.

2014-08-05  Andrew Pinski  <apinski@cavium.com>

	Part of bug 11692
	* config/aarch64/aarch64.h (STORE_BY_PIECES_P): For now return true
	if the size is less than or equal to 1.

2014-08-05  Andrew Pinski  <apinski@cavium.com>

	Revert:
	2014-06-06  James Greenhalgh  <james.greenhalgh@arm.com>

	* config/aarch64/aarch64-protos.h (aarch64_expand_movmem): New.
	* config/aarch64/aarch64.c (aarch64_move_pointer): New.
	(aarch64_progress_pointer): Likewise.
	(aarch64_copy_one_part_and_move_pointers): Likewise.
	(aarch64_expand_movmen): Likewise.
	* config/aarch64/aarch64.h (MOVE_RATIO): Set low.
	* config/aarch64/aarch64.md (movmem<mode>): New.

2014-08-02  Andrew Pinski  <apinski@cavium.com>

	* config.gcc (aarch64*-*-*): Set target_gtfiles to include
	aarch64-builtins.c.
	* config/aarch64/aarch64-builtins.c: Include gt-aarch64-builtins.h
	at the end of the file.

2014-07-26  Andrew Pinski  <apinski@cavium.com>

	Bug #11606
	* config/aarch64/aarch64.md (*extr_insv_lower_reg<mode>1): New pattern
	which just has the shift and not the zero_extract.

2014-07-26  Andrew Pinski  <apinski@cavium.com>

	* config/aarch64/aarch64.c (aarch64_rtx_costs_wrapper):
	Disable the printing of the cost as it is too noisy.

2014-07-26  Andrew Pinski  <apinski@cavium.com>

	Bug #11605
	* config/aarch64/aarch64-simd-builtins.def (bswap): Use CF2 rather
	than CF10 so 2 is appended on the code.
	* config/aarch64/aarch64-simd.md (bswap<mode>): Rename to ...
	(bswap<mode>2): This so it matches for the optable.

2014-07-24  Andrew Pinski  <apinski@cavium.com>

	* config/aarch64/aarch64-protos.h (prefetch_cost): New struct.
	(struct tune_params): Add prefetch_costs field.
	* config/aarch64/aarch64.c (generic_prefetch_costs): New variable.
	(thunder_prefetch_costs): New variable to hold thunder prefetching tuning.
	(generic_tunings): Update to use generic_prefetch_costs.
	(cortexa53_tunings): Likewise.
	(cortexa57_tunings): Likewise.
	(thunder_tunings): Use the thunder_prefetch_costs.
	(aarch64_override_options): Set PARAM_SIMULTANEOUS_PREFETCHES,
	PARAM_L1_CACHE_LINE_SIZE, PARAM_L1_CACHE_SIZE, PARAM_L2_CACHE_SIZE
	from the cost/tuning structure.
	Also enable software prefetching for CPUs where it is helpful.

2014-07-24  Andrew Pinski  <apinski@cavium.com>

	Port:
	2014-07-04  Ganesh Gopalasubramanian <Ganesh.Gopalasubramanian@amd.com>
	* config/aarch64/aarch64.md (define_insn "*prefetch")
	(define_insn "prefetch"): New
	* config/aarch64/predicates.md (aarch64_prefetch_pimm)
	(aarch64_prefetch_unscaled): New.
	* config/arm/types.md (define_attr "type"): Add prefetch.

2014-06-16  Andrew Pinski  <apinski@cavium.com>

	* config/aarch64/aarch64.md (mov<mode>cc:ALLI):
	Handle the case where the incoming compare is already
	a CCmode compare.
	(mov<mode>cc:GPF): Likewise.

2014-06-15  Andrew Pinski  <apinski@cavium.com>

	Bug #10196
	* config/aarch64/predicates.md (const0_operand): New predicate.
	* config/aarch64/aarch64.md (cstorecc4): New define_expand
	for ccmp code to use.

2014-05-28  Joel Jones  <jjones@cavium.com>

	* gcc/testsuite/gcc.target/aarch64/atomic-comp-swap-release-acquire.c:
	Skip test for load/store exclusive instructions if TARGET_ATOMIC.

2014-05-24  Joel Jones  <jjones@cavium.com>

	Bug #9775
	* gcc/config/aarch64/aarch64.c (aarch64_expand_compare_and_swap):
	Ensure that oldval is in a register.

2014-05-24  Joel Jones  <jjones@cavium.com>

	Bug #9775
	* gcc/config/aarch64/aarch64.c (aarch64_expand_compare_and_swap):
	Generate a CAS instruction if target supports ARVMv8.1 atomics.
	* gcc/config/aarch64/atomics.md (define_insn
	"aarch64_atomic_CAS<mode>") add.
	* gcc/testsuite/gcc.target/aarch64/aarch64.exp
	(check_effective_target_aarch64_atomic): Add aarch64 atomic feature
	test.
	* testsuite/gcc.target/aarch64/atomicExchangeSwapCAS-1.c: char CAS
	* testsuite/gcc.target/aarch64/atomicExchangeSwapCAS-2.c: short CAS
	* testsuite/gcc.target/aarch64/atomicExchangeSwapCAS-3.c: int CAS

2014-05-23  Joel Jones  <jjones@cavium.com>

	* gcc/config/aarch64/aarch64-cores.def: Associate AARCH64_FL_ATOMIC for
	  thunder.
	* gcc/config/aarch64/aarch64-option-extensions.def: Add extension
	  "atomic" for AARCH64_FL_ATOMIC
	* gcc/config/aarch64/aarch64.h: Define __ARM_FEATURE_ATOMIC,
	  AARCH64_FL_ATOMIC, AARCH64_ISA_ATOMIC, and TARGET_ATOMIC

2014-04-25  Joel Jones  <jjones@caviumnetworks.com>

	* config/aarch64/aarch64.md (*add_mul_imm_si_uxtw): Avoid generating 
	extraneous zero-extend for Add (extended register)
	* testsuite/gcc.target/aarch64/add-extend.c

2014-04-14  Andrew Pinski  <apinski@cavium.com>

	* config/aarch64/aarch64.md (*aarch64_ashl_sisd_or_int_<mode>3): Use ! instead of ? to allow
	for the vector versions to be used but only if it was already in the vector register.
	(*aarch64_lshr_sisd_or_int_<mode>3): Discourage the vector register alternatives.
	(*aarch64_ashr_sisd_or_int_<mode>3): Likewise.

2014-04-11  Andrew Pinski  <apinski@cavium.com>

	Bug #10042
	* config/aarch64/aarch64-protos.h (aarch64_mems_ok_for_pair_peep): Add extra argument.
	* config/aarch64/aarch64.c (aarch64_mems_ok_for_pair_peep): Add extra argument and take
	that into account; copying from the sparc backend.
	* aarch64.md (peephole2s to generate ldp
	instruction for 2 consecutive loads from memory): Re-enable.
	Update call to 	aarch64_mems_ok_for_pair_peep.
	(peephole2s to generate stp instruction for 2 consecutive
	stores to memory in integer mode): Re-enable.
	Update call to 	aarch64_mems_ok_for_pair_peep.
	(peephole2s to generate ldp instruction for 2 consecutive
	loads from memory in floating point mode): Re-enable.
	Update call to 	aarch64_mems_ok_for_pair_peep.
	(peephole2s to generate stp instruction for 2 consecutive
	stores to memory in floating point mode): Re-enable.
	Update call to 	aarch64_mems_ok_for_pair_peep.

2014-04-10  Andrew Pinski  <apinski@cavium.com>

	* aarch64.md (peephole2s to generate ldp
	instruction for 2 consecutive loads from memory): Disable for now.
	(peephole2s to generate stp instruction for 2 consecutive
	stores to memory in integer mode): Disable for now.
	(peephole2s to generate ldp instruction for 2 consecutive
	loads from memory in floating point mode): Disable for now.
	(peephole2s to generate stp instruction for 2 consecutive
	stores to memory in floating point mode): Disable for now.

2014-04-07  Andrew Pinski  <apinski@cavium.com>

	* config/aarch64/aarch64.c (aarch64_mems_ok_for_pair_peep): Reject volatile
	memory.

2014-03-25  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>

	Bug #5839
	* config/aarch64/aarch64.c (TARGET_FLAGS_REGNUM): Define.

2014-03-18  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>

	* config/aarch64/aarch64.md (mov<mode>cc): Define for floating
	point modes.
	
2014-03-18  Andrew Pinski  <apinski@cavium.com>

	* config/aarch64/aarch64.md (mov<GPF:mode><GPI:mode>cc): Remove
	the pattern as invalid

2014-03-05  Andrew Pinski  <apinski@cavium.com>

	* config/aarch64/aarch64.md (*aarch64_ashl_sisd_or_int_<mode>3):
	Discourage the vector register alternatives.

2014-03-03  Andrew Pinski  <apinski@cavium.com>

	* config/aarch64/thunder.md: Add the start of the neon scheduling.

2014-02-24  Zhenqiang Chen  <zhenqiang.chen@linaro.org>

	* config/aarch64/aarch64-modes.def (CC_DNE, CC_DEQ, CC_DLE, CC_DLT,
	CC_DGE, CC_DGT, CC_DLEU, CC_DLTU, CC_DGEU, CC_DGTU): New modes.
	* config/aarch64/aarch64-protos.h (aarch64_uimm5, aarch64_output_ccmp):
	New prototypes.
	* config/aarch64/aarch64.c (aarch64_get_condition_code_1): New function
	extracted from aarch64_get_condition_code and hand ccmp.
	(aarch64_code_to_ccmode, aarch64_convert_mode, aarch64_code_to_nzcv
	aarch64_mode_to_condition_code, aarch64_output_ccmp, aarch64_uimm5):
	New functions.
	(aarch64_gen_ccmp_first, aarch64_gen_ccmp_next): New hooks.
	(aarch64_get_condition_code): Call aarch64_get_condition_code_1.
	(AARCH64_CC_V, AARCH64_CC_C, AARCH64_CC_Z, AARCH64_CC_N): New MICROs.
	* config/aarch64/aarch64.md (cbranchcc4, ccmp_and, ccmp_ior): New
	instruction patterns.
	* config/aarch64/constraints.md (Usn): New constrain.
	* config/aarch64/predicates.md (ccmp_cc_register, aarch64_ccmp_operand,
	aarch64_ccmp_immediate): New predicates.

2014-02-21  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>

	* config/aarch64/aarch64-protos.h
	(aarch64_registers_ok_for_pair_peep): Remove prototype.
	(aarch64_registers_ok_for_load_pair_peep): New prototype.
	(aarch64_registers_ok_for_store_pair_peep): New prototype.
	* config/aarch64/aarch64.c
	(aarch64_registers_ok_for_pair_peep): Remove .
	(aarch64_registers_ok_for_load_pair_peep): New function.
	(aarch64_registers_ok_for_store_pair_peep): New function.
	* config/aarch64/aarch64.md:
	(peephole2s to generate stp instruction for 2 consecutive
	stores to memory in integer mode): Allow use of same registers
	data to be stored into memory.
	(peephole2s to generate stp instruction for 2 consecutive
	stores to memory in floating point mode): Likewise.

2014-02-14  Andrew Pinski  <apinski@cavium.com>

	* config/aarch64/aarch64.c (aarch64_macro_fusion_p): New function.
	(aarch64_macro_fusion_pair): New function.
	(TARGET_SCHED_MACRO_FUSION_P): Define.
	(TARGET_SCHED_MACRO_FUSION_PAIR_P): Define.

2014-02-13  Andrew Pinski  <apinski@cavium.com>

	* config/aarch64/aarch64-protos.h (tune_params): Add align field.
	* config/aarch64/aarch64.c (generic_tunings): Set the align field.
	(cortexa53_tunings): Likewise.
	(thunder_tunings): Likewise.
	(aarch64_override_options): Use the align field of aarch64_tune_params
	to set the loop, jump and function alignment.

2014-02-10  Andrew Pinski  <apinski@cavium.com>

	* testsuite/gcc.target/aarch64/vdiv_f.c: Disable unroll-loops.

2014-02-10  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>

	* config/aarch64/aarch64.md (load_pair<mode>): Modify to
	generate ldp instruction in int mode for vec registers.
	(store_pair<mode>): Modify to generate stp instruction in
	int mode for vec registers.

2014-02-10  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>
	
	* config/aarch64/aarch64.md (*csinc2<mode>_insn): Use generic
	mode for cc_register.
	* (csinc3<mode>_insn) Likewise.
	* (*csinv3<mode>_insn) Likewise.
	* (*csneg3<mode>_insn) Likewise.

2014-01-30  Andrew Pinski  <apinski@cavium.com>
	    Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>

	* config/aarch64/aarch64-protos.h
	(aarch64_registers_ok_for_pair_peep): New prototype.
	(aarch64_mems_ok_for_pair_peep): New prototype.
	* config/aarch64/aarch64.c
	(aarch64_registers_ok_for_pair_peep): New function.
	(aarch64_mems_ok_for_pair_peep): New function.
	* config/aarch64/aarch64.md (store_pair<mode>): Use
	aarch64_mems_ok_for_pair_peep rather than doing
	the compare directly.
	(load_pair<mode>): Likewise.
	(peephole2s to generate ldp
	instruction for 2 consecutive loads from memory): New.
	(peephole2s to generate stp instruction for 2 consecutive
	stores to memory in integer mode): New.
	(peephole2s to generate ldp instruction for 2 consecutive
	loads from memory in floating point mode): New.
	(peephole2s to generate stp instruction for 2 consecutive
	stores to memory in floating point mode): New.

2014-01-30  Andrew Pinski  <apinski@cavium.com>

	* config/aarch64/thunder.md (thunder_f_cvt): Add f_cvti2f.
	(thunder_64simd_fp_load): New reserve.
	(thunder_128simd_pair_load): Likewise.
	(thunder_simd_fp_store): Likewise.
	(thunder_64neon_storepair): Likewise.
	(thunder_128neon_storepair): Likewise.

2014-01-13  Andrew Pinski  <apinski@cavium.com>

	* config/aarch64/aarch64-cores.def (thunder): Use thunder tuning.
	* config/aarch64/aarch64.c (thunder_extra_costs): New variable.
	(thunder_regmove_cost): New variable.
	(thunder_tunings): New variable.
	* config/aarch64/aarch64.md: Include thunder.md
	(mode): New attr.
	(generic_sched): Default thunder to no.
	(<su>muldi3_highpart): Add mode attr.
	(<su_optab>div<mode>3): Likewise.
	(*<su_optab>divsi3_uxtw): Likewise.
	* config/aarch64/thunder.md: New file.

2013-05-29  Andrew Pinski  <apinski@cavium.com>

	* config/aarch64/aarch64-cores.def: Add an entry for thunder.
	* config/aarch64/aarch64-tune.md: Re-generate.

2014-09-05  Joel Jones  <jjones@caveonetworks.com>
	* gcc/config/aarch64/aarch64-cores.def (AARCH64_CORE("thunderx"...)):
	remove AARCH64_FL_ATOMIC
